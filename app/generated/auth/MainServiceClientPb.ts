/**
 * @fileoverview gRPC-Web generated client stub for kueater.auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.30.0
// source: auth/main.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as auth_main_pb from '../auth/main_pb'; // proto import: "auth/main.proto"


export class AuthServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAuthProcess = new grpcWeb.MethodDescriptor(
    '/kueater.auth.AuthService/AuthProcess',
    grpcWeb.MethodType.UNARY,
    auth_main_pb.AuthProcessRequest,
    auth_main_pb.AuthProcessResponse,
    (request: auth_main_pb.AuthProcessRequest) => {
      return request.serializeBinary();
    },
    auth_main_pb.AuthProcessResponse.deserializeBinary
  );

  authProcess(
    request: auth_main_pb.AuthProcessRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_main_pb.AuthProcessResponse>;

  authProcess(
    request: auth_main_pb.AuthProcessRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_main_pb.AuthProcessResponse) => void): grpcWeb.ClientReadableStream<auth_main_pb.AuthProcessResponse>;

  authProcess(
    request: auth_main_pb.AuthProcessRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_main_pb.AuthProcessResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/kueater.auth.AuthService/AuthProcess',
        request,
        metadata || {},
        this.methodDescriptorAuthProcess,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/kueater.auth.AuthService/AuthProcess',
    request,
    metadata || {},
    this.methodDescriptorAuthProcess);
  }

  methodDescriptorLogoutProcess = new grpcWeb.MethodDescriptor(
    '/kueater.auth.AuthService/LogoutProcess',
    grpcWeb.MethodType.UNARY,
    auth_main_pb.LogoutProcessRequest,
    auth_main_pb.LogoutProcessResponse,
    (request: auth_main_pb.LogoutProcessRequest) => {
      return request.serializeBinary();
    },
    auth_main_pb.LogoutProcessResponse.deserializeBinary
  );

  logoutProcess(
    request: auth_main_pb.LogoutProcessRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_main_pb.LogoutProcessResponse>;

  logoutProcess(
    request: auth_main_pb.LogoutProcessRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_main_pb.LogoutProcessResponse) => void): grpcWeb.ClientReadableStream<auth_main_pb.LogoutProcessResponse>;

  logoutProcess(
    request: auth_main_pb.LogoutProcessRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_main_pb.LogoutProcessResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/kueater.auth.AuthService/LogoutProcess',
        request,
        metadata || {},
        this.methodDescriptorLogoutProcess,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/kueater.auth.AuthService/LogoutProcess',
    request,
    metadata || {},
    this.methodDescriptorLogoutProcess);
  }

}

